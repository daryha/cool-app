"use client";

import { useParams } from "next/navigation";
import { useEffect, useState } from "react";
import axios from "../../../axios";
import Wrapper from "../../../components/Wrapper";
import Link from "next/link";
import { motion, AnimatePresence } from "framer-motion";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchReviewsCoach,
  selectReviewsCoach,
} from "../../../store/slice/reviewSlice";
import {
  Star,
  X,
  Award,
  Clock,
  MapPin,
  Phone,
  Mail,
  Calendar,
  ChevronDown,
  Instagram,
  Facebook,
  Dumbbell,
  Users,
  Shield,
  CheckCircle,
} from "lucide-react";

import ReviewsSection from "../../../components/ReviewsSection";
import AddReviewModal from "../../../components/AddReviewModal";

const Page = () => {
  const { id } = useParams();
  const [trainer, setTrainer] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showReviewModal, setShowReviewModal] = useState(false);
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [newComment, setNewComment] = useState("");
  const [newScore, setNewScore] = useState(5);
  const [bookingDate, setBookingDate] = useState("");
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");
  const [activeTab, setActiveTab] = useState("about");
  const [expandedSections, setExpandedSections] = useState({});

  const dispatch = useDispatch();
  const reviews = useSelector(selectReviewsCoach);
  const userData = useSelector((state) => state.auth.data);
  const status = useSelector((state) => state.review.status);

  useEffect(() => {
    const fetchTrainer = async () => {
      try {
        setLoading(true);
        const { data } = await axios.get(`/api/coaches/${id}`);
        setTrainer(data);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–µ—Ä–∞", err);
      } finally {
        setLoading(false);
      }
    };

    if (id) fetchTrainer();
  }, [id]);

  useEffect(() => {
    if (id) dispatch(fetchReviewsCoach(id));
  }, [id, dispatch]);

  const averageRating = reviews?.length
    ? (
        reviews.reduce((sum, r) => sum + (r.score || 0), 0) / reviews.length
      ).toFixed(1)
    : null;

  const handleSubmitReview = async () => {
    if (!userData) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞");
      return;
    }

    if (!newComment.trim()) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É");
      return;
    }

    try {
      await axios.post(`/api/review/coach/${id}`, {
        userId: userData.id,
        coachId: id,
        score: newScore,
        comment: newComment,
      });
      setShowReviewModal(false);
      setNewComment("");
      setNewScore(5);
      dispatch(fetchReviewsCoach(id));
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  };

  const handleBooking = async () => {
    if (!userData) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
      return;
    }

    if (!bookingDate || !startTime || !endTime) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
      return;
    }

    try {
      await axios.post("/api/booking/coach", {
        coachId: id,
        userId: userData.id,
        bookingDate,
        startTime: `${startTime}:00`,
        endTime: `${endTime}:00`,
      });
      alert("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!");
      setShowBookingModal(false);
      setBookingDate("");
      setStartTime("");
      setEndTime("");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  };

  const calculateTotalPrice = () => {
    if (!startTime || !endTime || !trainer?.price) return 0;
    const [startHour] = startTime.split(":").map(Number);
    const [endHour] = endTime.split(":").map(Number);
    const hours = endHour - startHour;
    return hours > 0 ? hours * trainer.price : 0;
  };

  const toggleSection = (section) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  if (loading || status === "loading") {
    return (
      <Wrapper>
        <div className="flex items-center justify-center min-h-[60vh]">
          <div className="animate-pulse flex flex-col items-center">
            <div className="rounded-full bg-gray-200 h-24 w-24 mb-4"></div>
            <div className="h-4 bg-gray-200 rounded w-48 mb-2"></div>
            <div className="h-3 bg-gray-200 rounded w-32"></div>
          </div>
        </div>
      </Wrapper>
    );
  }

  if (!trainer) {
    return (
      <Wrapper>
        <div className="flex flex-col items-center justify-center min-h-[60vh] text-center">
          <div className="text-red-500 text-6xl mb-4">üòï</div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">
            –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
          </h2>
          <p className="text-gray-600 mb-6">
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º —Ç—Ä–µ–Ω–µ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          </p>
          <Link
            href="/trainers"
            className="bg-color-blue hover:bg-blue-700 text-white px-6 py-2 rounded-xl text-sm font-semibold transition-colors"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–Ω–µ—Ä–æ–≤
          </Link>
        </div>
      </Wrapper>
    );
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä–∞
  const trainerTags = (trainer.title || "")
    .split(",")
    .filter((tag) => tag.trim() !== "");
  const achievements = (trainer.achievements || "")
    .split(",")
    .filter((ach) => ach.trim() !== "");
  const specializations = (
    trainer.specializations || "–û–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
  )
    .split(",")
    .filter((spec) => spec.trim() !== "");

  return (
    <Wrapper>
      <motion.div
        className="mt-10 mb-16"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ */}
        <motion.div
          className="bg-white border rounded-3xl shadow-xl overflow-hidden"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="relative">
            {/* –§–æ–Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä */}
            <div className="h-48 bg-gradient-to-r from-color-blue to-color-green"></div>

            {/* –ê–≤–∞—Ç–∞—Ä –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="px-8 pb-8">
              <div className="flex flex-col md:flex-row gap-8">
                {/* –ê–≤–∞—Ç–∞—Ä */}
                <div className="rounded-2xl overflow-hidden h-48 w-48 -mt-24 border-4 border-white shadow-lg">
                  <img
                    className="h-full w-full object-cover"
                    src={
                      trainer.photoUrl ||
                      "https://placehold.co/400x400?text=–¢—Ä–µ–Ω–µ—Ä"
                    }
                    alt={`${trainer.firstName} ${trainer.lastName}`}
                  />
                </div>

                {/* –ò–º—è, —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="flex-1 pt-4">
                  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
                    <div>
                      <h1 className="text-3xl font-bold text-gray-900">
                        {trainer.firstName} {trainer.lastName}
                      </h1>
                      <p className="text-gray-600 font-medium">
                        {trainer.sportType || "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"}
                      </p>
                    </div>

                    <div className="flex items-center gap-4">
                      {averageRating && (
                        <div className="flex items-center gap-1 bg-gray-100 px-3 py-1 rounded-full">
                          <div className="flex">
                            {[1, 2, 3, 4, 5].map((star) => (
                              <Star
                                key={star}
                                size={18}
                                className={
                                  star <= Math.round(averageRating)
                                    ? "fill-yellow-400 text-yellow-400"
                                    : "text-gray-300"
                                }
                              />
                            ))}
                          </div>
                          <span className="font-bold text-gray-800 ml-1">
                            {averageRating}
                          </span>
                          <span className="text-gray-500 text-sm">
                            ({reviews?.length || 0})
                          </span>
                        </div>
                      )}

                      <button
                        onClick={() => setShowBookingModal(true)}
                        className="bg-color-blue hover:bg-blue-700 text-white px-6 py-2 rounded-xl text-sm font-semibold transition-colors"
                      >
                        –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                    </div>
                  </div>

                  {/* –¢–µ–≥–∏ –∏ –æ–ø—ã—Ç */}
                  <div className="mt-4 flex flex-wrap gap-2">
                    {trainerTags.map((tag, index) => (
                      <span
                        key={index}
                        className="px-3 py-1 rounded-full text-sm font-medium bg-color-green/10 text-color-green"
                      >
                        {tag.trim()}
                      </span>
                    ))}
                    <span className="px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-700 flex items-center gap-1">
                      <Clock size={14} />
                      –û–ø—ã—Ç {trainer.experience} –ª–µ—Ç
                    </span>
                  </div>

                  {/* –ö–æ—Ä–æ—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
                    {trainer.phone && (
                      <div className="flex items-center gap-2">
                        <Phone size={18} className="text-gray-400" />
                        <a
                          href={`tel:${trainer.phone}`}
                          className="text-color-blue hover:underline"
                        >
                          {trainer.phone}
                        </a>
                      </div>
                    )}
                    {trainer.email && (
                      <div className="flex items-center gap-2">
                        <Mail size={18} className="text-gray-400" />
                        <a
                          href={`mailto:${trainer.email}`}
                          className="text-color-blue hover:underline"
                        >
                          {trainer.email}
                        </a>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* –í–∫–ª–∞–¥–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
          <div className="border-t">
            <div className="px-8">
              <div className="flex space-x-6 overflow-x-auto scrollbar-hide">
                <button
                  onClick={() => setActiveTab("about")}
                  className={`py-4 font-medium border-b-2 transition-colors ${
                    activeTab === "about"
                      ? "border-color-blue text-color-blue"
                      : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
                >
                  –û —Ç—Ä–µ–Ω–µ—Ä–µ
                </button>
                <button
                  onClick={() => setActiveTab("achievements")}
                  className={`py-4 font-medium border-b-2 transition-colors ${
                    activeTab === "achievements"
                      ? "border-color-blue text-color-blue"
                      : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
                >
                  –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                </button>
                <button
                  onClick={() => setActiveTab("schedule")}
                  className={`py-4 font-medium border-b-2 transition-colors ${
                    activeTab === "schedule"
                      ? "border-color-blue text-color-blue"
                      : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
                >
                  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                </button>
                <button
                  onClick={() => setActiveTab("reviews")}
                  className={`py-4 font-medium border-b-2 transition-colors ${
                    activeTab === "reviews"
                      ? "border-color-blue text-color-blue"
                      : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
                >
                  –û—Ç–∑—ã–≤—ã
                </button>
              </div>
            </div>

            {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
            <div className="p-8">
              {/* –û —Ç—Ä–µ–Ω–µ—Ä–µ */}
              {activeTab === "about" && (
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                  <div className="lg:col-span-2 space-y-6">
                    <div>
                      <h3 className="text-xl font-semibold text-gray-800 mb-3">
                        –û–±–æ –º–Ω–µ
                      </h3>
                      <p className="text-gray-600 leading-relaxed whitespace-pre-line">
                        {trainer.description || "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."}
                      </p>
                    </div>

                    <div>
                      <h3 className="text-xl font-semibold text-gray-800 mb-3">
                        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                      </h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {specializations.map((spec, index) => (
                          <div key={index} className="flex items-center gap-2">
                            <CheckCircle
                              size={16}
                              className="text-color-green"
                            />
                            <span className="text-gray-700">{spec.trim()}</span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {achievements.length > 0 && (
                      <div>
                        <h3 className="text-xl font-semibold text-gray-800 mb-3">
                          –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                        </h3>
                        <div className="space-y-2">
                          {achievements.slice(0, 3).map((ach, index) => (
                            <div
                              key={index}
                              className="flex items-center gap-2"
                            >
                              <Award size={16} className="text-color-blue" />
                              <span className="text-gray-700">
                                {ach.trim()}
                              </span>
                            </div>
                          ))}
                          {achievements.length > 3 && (
                            <button
                              className="text-color-blue hover:underline text-sm font-medium mt-2"
                              onClick={() => setActiveTab("achievements")}
                            >
                              –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                            </button>
                          )}
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="space-y-6">
                    <div className="border rounded-xl p-6 bg-gray-50">
                      <h3 className="text-lg font-semibold text-gray-800 mb-4">
                        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ
                      </h3>
                      <ul className="space-y-3">
                        <li className="flex justify-between">
                          <span className="text-gray-500">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                          <span className="font-medium">
                            {trainer.price?.toLocaleString("ru-RU")} ‚Ç∏ / —á–∞—Å
                          </span>
                        </li>
                        <li className="flex justify-between">
                          <span className="text-gray-500">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</span>
                          <span className="font-medium">
                            {trainer.experience} –ª–µ—Ç
                          </span>
                        </li>
                        <li className="flex justify-between">
                          <span className="text-gray-500">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</span>
                          <span className="font-medium">
                            {trainer.sportType || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
                          </span>
                        </li>

                        <li className="flex justify-between">
                          <span className="text-gray-500">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:</span>
                          <span className="font-medium">
                            {trainer.certificates ? "–ï—Å—Ç—å" : "–ù–µ—Ç"}
                          </span>
                        </li>
                      </ul>
                      <button
                        onClick={() => setShowBookingModal(true)}
                        className="w-full mt-6 bg-color-green hover:bg-green-600 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
                      >
                        –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
              {activeTab === "achievements" && (
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold text-gray-800 mb-3">
                    –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                  </h3>

                  {achievements.length > 0 ? (
                    <div className="space-y-4">
                      {achievements.map((ach, index) => (
                        <div
                          key={index}
                          className="flex items-start gap-3 p-4 border rounded-lg"
                        >
                          <Award size={20} className="text-color-blue mt-1" />
                          <div>
                            <p className="text-gray-700">{ach.trim()}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500">
                      –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.
                    </p>
                  )}

                  {/* –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã */}
                  <div className="mt-8">
                    <h3 className="text-xl font-semibold text-gray-800 mb-3">
                      –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
                    </h3>
                    <div className="space-y-4">
                      {trainer.education && (
                        <div className="flex items-start gap-3 p-4 border rounded-lg">
                          <Shield size={20} className="text-gray-600 mt-1" />
                          <div>
                            <h4 className="font-medium">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h4>
                            <p className="text-gray-700">{trainer.education}</p>
                          </div>
                        </div>
                      )}

                      {trainer.certificates && (
                        <div className="flex items-start gap-3 p-4 border rounded-lg">
                          <Shield size={20} className="text-color-green mt-1" />
                          <div>
                            <h4 className="font-medium">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã</h4>
                            <p className="text-gray-700">
                              {trainer.certificates}
                            </p>
                          </div>
                        </div>
                      )}

                      {!trainer.education && !trainer.certificates && (
                        <p className="text-gray-500">
                          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –ª–∏—Ü–µ–Ω–∑–∏—è—Ö –ø–æ–∫–∞ –Ω–µ
                          –¥–æ–±–∞–≤–ª–µ–Ω–∞.
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
              {activeTab === "schedule" && (
                <div>
                  <div className="flex justify-between items-center mb-6">
                    <h3 className="text-xl font-semibold text-gray-800">
                      –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å
                    </h3>
                    <button
                      onClick={() => setShowBookingModal(true)}
                      className="bg-color-blue hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-semibold transition-colors flex items-center gap-2"
                    >
                      <Calendar size={16} />
                      –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                  </div>

                  <div className="bg-gray-50 rounded-xl p-6 border">
                    <p className="text-gray-600 mb-4">
                      –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
                      "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –¥–ª—è –≤–∞—Å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
                    </p>

                    <div className="mt-6">
                      <h4 className="font-medium text-gray-800 mb-2">
                        –†–∞–±–æ—á–∏–µ —á–∞—Å—ã:
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex justify-between p-3 border rounded bg-white">
                          <span className="text-gray-600">
                            –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞:
                          </span>
                          <span className="font-medium">
                            {trainer.workingHours?.weekdays || "08:00 - 20:00"}
                          </span>
                        </div>
                        <div className="flex justify-between p-3 border rounded bg-white">
                          <span className="text-gray-600">–°—É–±–±–æ—Ç–∞:</span>
                          <span className="font-medium">
                            {trainer.workingHours?.saturday || "10:00 - 18:00"}
                          </span>
                        </div>
                        <div className="flex justify-between p-3 border rounded bg-white">
                          <span className="text-gray-600">–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:</span>
                          <span className="font-medium">
                            {trainer.workingHours?.sunday || "–í—ã—Ö–æ–¥–Ω–æ–π"}
                          </span>
                        </div>
                      </div>
                    </div>

                    <div className="mt-6">
                      <h4 className="font-medium text-gray-800 mb-2">
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:
                      </h4>
                      <div className="p-3 border rounded bg-white">
                        <div className="flex justify-between">
                          <span className="text-gray-600">
                            –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:
                          </span>
                          <span className="font-medium">60 –º–∏–Ω—É—Ç</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* –û—Ç–∑—ã–≤—ã */}
              {activeTab === "reviews" && (
                <div>
                  <div className="flex justify-between items-center mb-6">
                    <h3 className="text-xl font-semibold text-gray-800">
                      –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
                    </h3>
                    <button
                      onClick={() => setShowReviewModal(true)}
                      className="text-color-blue hover:underline text-sm font-medium flex items-center gap-1"
                    >
                      <Star size={16} />
                      –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                    </button>
                  </div>

                  {reviews && reviews.length > 0 ? (
                    <div className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <div className="bg-gray-50 p-4 rounded-lg text-center">
                          <div className="text-4xl font-bold text-gray-800 mb-1">
                            {averageRating}
                          </div>
                          <div className="flex justify-center mb-2">
                            {[1, 2, 3, 4, 5].map((star) => (
                              <Star
                                key={star}
                                size={18}
                                className={
                                  star <= Math.round(averageRating)
                                    ? "fill-yellow-400 text-yellow-400"
                                    : "text-gray-300"
                                }
                              />
                            ))}
                          </div>
                          <div className="text-gray-500 text-sm">
                            {reviews.length} –æ—Ç–∑—ã–≤–æ–≤
                          </div>
                        </div>

                        <div className="md:col-span-2">
                          <div className="space-y-1">
                            {[5, 4, 3, 2, 1].map((rating) => {
                              const count = reviews.filter(
                                (r) => Math.round(r.score) === rating
                              ).length;
                              const percentage =
                                reviews.length > 0
                                  ? Math.round((count / reviews.length) * 100)
                                  : 0;

                              return (
                                <div
                                  key={rating}
                                  className="flex items-center gap-2"
                                >
                                  <div className="w-12 text-gray-600 text-sm">
                                    {rating} –∑–≤–µ–∑–¥
                                  </div>
                                  <div className="w-full bg-gray-200 rounded-full h-2">
                                    <div
                                      className="bg-color-blue h-2 rounded-full"
                                      style={{ width: `${percentage}%` }}
                                    ></div>
                                  </div>
                                  <div className="w-8 text-gray-600 text-sm">
                                    {percentage}%
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      </div>

                      <div className="space-y-4">
                        {reviews.map((review, idx) => (
                          <div
                            key={idx}
                            className="border rounded-lg p-4 bg-white"
                          >
                            <div className="flex justify-between items-start">
                              <div className="flex items-center mb-2">
                                <div className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center text-gray-600 font-bold">
                                  {review.userName?.charAt(0) || "–£"}
                                </div>
                                <div className="ml-3">
                                  <div className="font-medium">
                                    {review.userName || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
                                  </div>
                                  <div className="text-sm text-gray-500">
                                    {new Date(
                                      review.createdAt
                                    ).toLocaleDateString("ru-RU")}
                                  </div>
                                </div>
                              </div>
                              <div className="flex items-center">
                                {Array.from({ length: 5 }).map((_, i) => (
                                  <Star
                                    key={i}
                                    size={16}
                                    className={
                                      i < review.score
                                        ? "fill-yellow-400 text-yellow-400"
                                        : "text-gray-300"
                                    }
                                  />
                                ))}
                              </div>
                            </div>
                            <p className="text-gray-600 mt-2">
                              {review.comment}
                            </p>
                          </div>
                        ))}
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-12 border rounded-lg bg-gray-50">
                      <div className="text-4xl mb-3">ü§î</div>
                      <h4 className="text-lg font-medium text-gray-800 mb-2">
                        –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤
                      </h4>
                      <p className="text-gray-600 mb-4">
                        –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤ –æ —Ç—Ä–µ–Ω–µ—Ä–µ
                      </p>
                      <button
                        onClick={() => setShowReviewModal(true)}
                        className="bg-color-blue hover:bg-blue-700 text-white px-6 py-2 rounded-xl text-sm font-semibold transition-colors"
                      >
                        –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                      </button>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </motion.div>
      </motion.div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <AnimatePresence>
        {showBookingModal && (
          <motion.div
            className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={(e) => {
              if (e.target === e.currentTarget) setShowBookingModal(false);
            }}
          >
            <motion.div
              className="bg-white rounded-xl p-6 w-full max-w-lg shadow-xl relative"
              initial={{ scale: 0.8 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0.8 }}
              transition={{ duration: 0.2 }}
              onClick={(e) => e.stopPropagation()}
            >
              <button
                className="absolute top-3 right-3 text-gray-400 hover:text-gray-600 transition-colors"
                onClick={() => setShowBookingModal(false)}
              >
                <X size={20} />
              </button>
              <h3 className="text-xl font-bold mb-4 text-gray-800">
                –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">
                    –î–∞—Ç–∞
                  </label>
                  <input
                    type="date"
                    value={bookingDate}
                    onChange={(e) => setBookingDate(e.target.value)}
                    className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-300 focus:border-blue-500 outline-none"
                    min={new Date().toISOString().split("T")[0]}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-600 mb-1">
                      –ù–∞—á–∞–ª–æ
                    </label>
                    <input
                      type="time"
                      value={startTime}
                      onChange={(e) => setStartTime(e.target.value)}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-300 focus:border-blue-500 outline-none"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-600 mb-1">
                      –ö–æ–Ω–µ—Ü
                    </label>
                    <input
                      type="time"
                      value={endTime}
                      onChange={(e) => setEndTime(e.target.value)}
                      className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-300 focus:border-blue-500 outline-none"
                    />
                  </div>
                </div>

                <div className="border-t pt-3 mt-3">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-gray-600">–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</span>
                    <span>{trainer.price?.toLocaleString("ru-RU")} ‚Ç∏/—á–∞—Å</span>
                  </div>
                  <div className="flex justify-between items-center font-semibold text-lg">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span className="text-color-blue">
                      {calculateTotalPrice().toLocaleString("ru-RU")} ‚Ç∏
                    </span>
                  </div>
                </div>

                <button
                  onClick={handleBooking}
                  disabled={!bookingDate || !startTime || !endTime}
                  className="bg-color-green hover:bg-green-600 text-white px-6 py-2 rounded-lg font-semibold w-full disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–∑—ã–≤–∞ */}
      <AnimatePresence>
        {showReviewModal && (
          <motion.div
            className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={(e) => {
              if (e.target === e.currentTarget) setShowReviewModal(false);
            }}
          >
            <motion.div
              className="bg-white rounded-xl p-6 w-full max-w-lg shadow-xl relative"
              initial={{ scale: 0.8 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0.8 }}
              transition={{ duration: 0.2 }}
              onClick={(e) => e.stopPropagation()}
            >
              <button
                className="absolute top-3 right-3 text-gray-400 hover:text-gray-600"
                onClick={() => setShowReviewModal(false)}
              >
                <X size={20} />
              </button>
              <h3 className="text-xl font-bold mb-4 text-gray-800">
                –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-2">
                    –û—Ü–µ–Ω–∫–∞
                  </label>
                  <div className="flex gap-1">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <button
                        key={i}
                        onClick={() => setNewScore(i + 1)}
                        className="focus:outline-none"
                      >
                        <Star
                          size={24}
                          className={`cursor-pointer ${
                            i < newScore
                              ? "fill-yellow-400 text-yellow-400"
                              : "text-gray-300"
                          }`}
                        />
                      </button>
                    ))}
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                  </label>
                  <textarea
                    value={newComment}
                    onChange={(e) => setNewComment(e.target.value)}
                    placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º..."
                    rows={4}
                    className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-300 focus:border-blue-500 outline-none"
                  ></textarea>
                </div>
                <button
                  onClick={handleSubmitReview}
                  disabled={!newComment.trim()}
                  className="bg-color-green hover:bg-green-600 text-white px-6 py-2 rounded-lg font-semibold w-full disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </Wrapper>
  );
};

export default Page;
